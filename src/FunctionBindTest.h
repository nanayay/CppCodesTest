#pragma once

#include "Common.h"

#include <functional>
#include <iostream>

namespace FunctionBindTest
{
    class test
    {
    public:
        test() {};

        double tt(double input)
        {
            return input;
        };

        double tt(double i, float j)
        {
            return i + j;
        }
    };

    double fptr_test_Cstyle(test* object, double (test::*fptr)(double), double input)
    {
        return (object->*fptr)(input); // ??, object->*fptr ??????(), ??????, ???????????, ???????
                                       // ??, ?????????, ???????????????
    }

    double fptr_testfunc1(std::function<double(double)> func, double input)
    {
        return func(input);
    }

    double fptr_testfunc2(std::function<double(double, float)> func, double input1, float input2)
    {
        // ??, ???function??????????, double(double, float), ???????, ????double(*p)(double, float)????
        // ??function?bind, ?????????????, ????OOP????????
        return func(input1, input2);
    }

    class FunctionBindTest : public Common::Test
    {
    protected:
        virtual bool run()
        {
            test t;

            // ??????, ??double tt(double)??
            std::cout << t.tt(3) << std::endl;

            // ??c???????????????, ??????????, ?????????????
            //      ??, ???????????, ????&test::tt, ???????tt, ???c????????
            std::cout << fptr_test_Cstyle(&t, &test::tt, 4) << std::endl;

            // ??????????, ?????????????, ?????function<>???, ??????????function<double(double)>?, ????????????????
            // cout << fptr_testfunc1(std::bind(static_cast<double(double)>(&test::tt), t, std::placeholders::_1), 4) << endl;

            // ??bind?????????, ????????????????
            // ??double tt(double)??
            //      ??, bind?????????????, ?????????????, ????????????????????
            //      ??, placeholders::_1????bind?????????????, ???????
            std::cout << fptr_testfunc1(std::bind(static_cast<double(test::*)(double)>(&test::tt), t, std::placeholders::_1), 5) << std::endl;

            // ??????, ??double tt(double, float)
            std::cout << t.tt(6, 7) << std::endl;

            // ??bind?????????, ????????????????
            // ??double tt(double, float)??
            //      ??, ???static_cast???????????????????
            std::cout << fptr_testfunc2(std::bind(static_cast<double(test::*)(double, float)>(&test::tt), t, std::placeholders::_1, std::placeholders::_2), 8, 9) << std::endl;

            return true;
        }
    };
}